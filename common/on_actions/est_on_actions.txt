# No scope, like on_game_start
on_monthly_pulse = {
	events = {
		est_academy.4
		est_academy.5
		est_academy.7		#Should be before est_academy.6.
		est_academy.6
		
		est_administratum.2	
		
		est_commerce.1
		est_commerce.3
		est_commerce.4
		
		est_cybernetics.5
		est_cybernetics.6
		est_cybernetics.13
		
		est_foundation.1
		est_foundation.2
		est_foundation.3
		est_foundation.13
		est_foundation.14
		est_foundation.15
		est_foundation.16
		
		est_friendship.4
		
		est_greed.1
		est_greed.7
		
		est_isolation.1
		est_isolation.2
		est_isolation.5
		est_isolation.6
		
		est_liberty.1
			
		est_justice.1
		est_justice.6
		
		est_militarism.1
		est_militarism.8
		est_militarism.9
		est_militarism.11
		est_militarism.15
		
		est_mysticism.3
		est_mysticism.4
		
		est_order.1
		est_order.4
		est_order.6
		
		est_piracy.6
		
		est_coll_indv.2
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		est_aesthetics.3
		
		est_foundation.6

		est_friendship.6
		
		est_greed.2
		
		est_liberty.2
		
		est_militarism.2
		est_militarism.12
		est_militarism.13
		
		est_order.4
		est_order.5
		
		est_piracy.4
	}
}

# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_mining_station = {
	events = {		
		est_industry.1
	}
}

# Triggers when an abandoned station is gained.
# this = ship of station being gained.
# from = country gaining ownership.
on_border_change_station_gained = {
	events = {
		est_industry.2
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {		
		est_mechanicum.1
		
		est_chivalry.9
	}
}

#A building construction has been completed.
# This = Army
# From = Planet
on_army_recruited = {
	events = {
		#Meant to have The Swarm event "Hordes" here, when on action is fixed by paradox.
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope
#This = Planet scope
on_planet_transfer = {
	events = {		
		est_general.2
		est_general.5
		
		est_aesthetics.2
		
		est_archivist.2
		
		est_cybernetics.2
		est_cybernetics.9
		est_cybernetics.12
		
		est_friendship.9
		est_friendship.11
		est_friendship.16
		
		est_greed.8
		est_greed.11
		
		est_industry.4
		
		est_isolation.9
		
		est_militarism.5
		
		est_natural.1		
		est_natural.4

		est_piracy.8
		est_piracy.10
		
		est_spaceborn.1
		est_spaceborn.3
		
		est_coll_indv.10
	}
}

#From = Country scope
#This = Planet scope
on_planet_ownerless = {
	events = {		
		#est.17	
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		est_archivist.3
		est_archivist.9
		
		est_commerce.2
		
		est_cybernetics.3
		est_cybernetics.14
		
		est_foundation.5
		est_foundation.11
		est_foundation.12
	}
}

# Pop is enslaved
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_enslaved = {
	events = {		
		est_cybernetics.7
		
		est_friendship.7
	}
}

# Pop is released from slavery
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_emancipated = {
	events = {
		est_cybernetics.8
		
		est_friendship.8
	}
}

# A pop has finished migrating to another planet
# Root = pop
# From = Tile on the new planet
# FromFrom = Tile on the old planet
on_pop_migration_end = {
	events = {
		est_general.4
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		est_chivalry.7
		
		est_friendship.14
		
		est_piracy.3
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
		est_justice.3
	
		est_liberty.7
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		est_chivalry.5
		
		est_justice.4
		
		est_liberty.8
	}
}

# A fleet has successfully escaped from combat, executed right before the fleet enters FTL
# This = escaping fleet
# From = system escaped from
# FromFrom = system escaping to
on_emergency_ftl = {
	events = {
		est_chivalry.6
	}
}

# A planet has begun the colonization process.
# Scope = Planet
on_colonization_started = {
	events = {		
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		est_general.3
		
		est_greed.8
		est_greed.11
		
		est_industry.4
		
		est_liberty.3
		
		est_natural.1
		est_natural.9
		
		est_spaceborn.1
		est_spaceborn.3		
	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {
		est_general.2
		
		est_natural.5
		
		est_spaceborn.2
	}
}

# Executed when the ruler is ousted and goes back to their pre-ruler class
# From = Previous Ruler, already has the new class
# This = Country
on_ruler_back_to_pre_ruler_class = {
	events = {
		est_archivist.6
		est_archivist.7
		
		est_chivalry.1
		
		est_militarism.10
		est_militarism.16
		
		est_mysticism.1
		
		est_order.7
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		est_academy.2
		est_academy.3
		
		est_administratum.1
		
		est_archivist.4
		est_archivist.5
		est_archivist.6
		est_archivist.7		
		
		est_chivalry.2
		
		est_militarism.10
		est_militarism.16
		
		est_mysticism.2
		
		est_order.8		
		
		est_coll_indv.8
	}
}

# Executed as a leader has died
# This = Country
# From = Leader
on_leader_death = {
	events = {
		est_archivist.6
		est_archivist.7
	}
}

# A leader leveled up.
# Scope = Country
# From = Leader
on_leader_level_up = {
	events = {
		est_academy.3
		
		est_coll_indv.3
		est_coll_indv.4
		est_coll_indv.5
		est_coll_indv.6
	}
}

# Executed as new ruler has been set
# This = Country
on_ruler_set = {
	events = {
		est_chivalry.8
	}
}

# A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# Root = Country
# From = system
# FromFrom = Fleet of the science ship that surveyed it, if any
on_system_survey = {
	events = {
		est_archivist.8
	}
}

#A building construction has been completed.
# This = Planet
# From = Tile
on_building_complete = {
	events = {
		est_academy.1
		
		est_aesthetics.1
		est_aesthetics.8
		
		est_faith.1

		est_friendship.15
		
		est_militarism.3
		est_militarism.4
		
		est_natural.2
		
		est_coll_indv.9
	}
}

# A building construction has been completed, which is an upgrade of previous building.
# This = Planet
# From = Tile
on_building_upgraded = {
	events = {
		est_academy.1
		
		est_aesthetics.1
		est_aesthetics.8
		
		est_faith.1

		est_friendship.15
		
		est_militarism.3
		est_militarism.4
		
		est_coll_indv.9
	}
}

# A building construction has finished, replacing another building.
# This = Planet
# From = Tile
on_building_replaced = {
	events = {
		est_academy.1
		
		est_aesthetics.1
		est_aesthetics.8
		
		est_faith.1

		est_friendship.15
		
		est_militarism.3
		est_militarism.4
		
		est_natural.2
		est_natural.3
		
		est_coll_indv.9
	}
}

# A building construction has demolished.
# This = Planet
# From = Tile
on_building_demolished = {
	events = {
		est_academy.1	
		
		est_aesthetics.1
		
		est_faith.1

		est_friendship.15
		
		est_militarism.3
		est_militarism.4
		
		est_natural.3
		
		est_coll_indv.9
	}
}

# A pop has been built
# This = pop
on_buildable_pop_created = {
	events = {
		est_general.7
		
		est_cybernetics.1
		est_cybernetics.11
	}
}

# A pop has been born
# This = pop
on_pop_birth = {
	events = {
		est_cybernetics.11
	}
}

# We changed a species right
# This = pop
on_pop_rights_change = {
	events = {
		est_cybernetics.10
	}
}

# Executes after a policy has been changed
# use last_changed_policy to identify which policy it was
# This = Country
on_policy_changed = {
	events = {
		est_cybernetics.4
	}
}

# This = Planet scope
# From = Country
# FromFrom = Pop
on_purge_complete = {
	events = {
		est_aesthetics.9
		est_aesthetics.10
		
		est_justice.2
	}
}

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_win = {
	events = {
		est_chivalry.4
		
		est_friendship.10
		
		est_liberty.9
		
		est_piracy.7
		est_piracy.9
	}
}

# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		est_chivalry.3
	}
}

# A war is beginning, executed for every country in the war.
# Root = Country
# From = War
on_war_beginning = {
	events = {
		est_general.8
		
		est_friendship.2
		est_friendship.12
		
		est_justice.8
		
		est_militarism.6
	}
}

# A war has been won
# Root = Winner Warleader
# From = Loser Warleader
# FromFrom = War
on_war_won = {
	events = {
		est_general.9
		
		est_isolation.11
		
		est_coll_indv.11
	}
}

# A status quo has been signed
# Root = Actor
# From = Recipient
# FromFrom = Main Attacker
# FromFromFrom = Main Defender
# FromFromFromFrom = War
on_status_quo = {
	events = {
		est_general.10
	}
}

# A status quo has been signed, by force
# Root = Recipient
# From = Actor
# FromFrom = Main Attacker
# FromFromFrom = Main Defender
# FromFromFromFrom = War
on_status_quo_forced = {
	events = {
		est_general.10
	}
}

# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_post_communications_established = {
	events = {
		est_friendship.1
	}
}
